import logging
from typing import Dict, List, Optional

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = "6665659470:AAG3fhzgeLVlt3BH2hgMfeRCgyR-eESHqUk"
ADMIN_IDS = [2014019763]  # Add your admin user IDs here
BROADCAST_RECEIVERS = []  # Add user IDs who should receive broadcasts

class MessageManager:
    """Helper class to manage message deletion tracking"""
    def __init__(self):
        self.user_message_map: Dict[int, List[int]] = {}

    def add_message_pair(self, user_id: int, bot_message_id: int, user_message_id: int):
        """Store message IDs for later deletion"""
        if user_id not in self.user_message_map:
            self.user_message_map[user_id] = []
        self.user_message_map[user_id].extend([bot_message_id, user_message_id])

    async def delete_message_pair(self, user_id: int, bot: "Bot"):
        """Delete all stored messages for a user"""
        if user_id in self.user_message_map:
            for msg_id in self.user_message_map[user_id]:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=msg_id)
                except Exception as e:
                    logger.error(f"Failed to delete message {msg_id}: {e}")
            del self.user_message_map[user_id]

message_manager = MessageManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message with instructions"""
    user = update.effective_user
    welcome_text = (
        f"Hi {user.mention_html()}!\n\n"
        "I'm a message management bot. Here's what I can do:\n"
        "- Send me a message and I'll reply to it\n"
        "- Click the 'Delete All' button to remove both messages\n"
        "- Admins can broadcast messages to all users"
    )
    
    await update.message.reply_html(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle regular text messages and store message IDs"""
    user_id = update.effective_user.id
    user_message = update.message
    
    # Reply to the user
    reply_text = (
        f"Received your message: {user_message.text}\n\n"
        "Click below to delete both messages:"
    )
    
    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("Delete All", callback_data="delete_all")
    ]])
    
    bot_message = await user_message.reply_text(
        reply_text,
        reply_markup=reply_markup
    )
    
    # Store message IDs for later deletion
    message_manager.add_message_pair(
        user_id=user_id,
        bot_message_id=bot_message.message_id,
        user_message_id=user_message.message_id
    )

async def delete_all_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the delete all button press"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # Acknowledge the button press
    await query.answer("Deleting messages...")
    
    # Delete all stored messages for this user
    await message_manager.delete_message_pair(user_id, context.bot)
    
    # Edit the original bot message to show completion
    try:
        await query.edit_message_text("Messages deleted successfully!")
    except Exception as e:
        logger.error(f"Failed to edit message: {e}")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a broadcast message to all registered users (admin only)"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("You are not authorized to use this command.")
        return
    
    if not context.args:
        await update.message.reply_text("Usage: /broadcast <message>")
        return
    
    message = " ".join(context.args)
    success_count = 0
    
    for user_id in BROADCAST_RECEIVERS:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"ðŸ“¢ Broadcast Message:\n\n{message}"
            )
            success_count += 1
        except Exception as e:
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
    
    await update.message.reply_text(
        f"Broadcast completed! Sent to {success_count}/{len(BROADCAST_RECEIVERS)} users."
    )

async def post_init(application: Application) -> None:
    """Post initialization - set bot commands"""
    commands = [
        BotCommand("start", "Start the bot"),
        BotCommand("broadcast", "Send broadcast message (admin only)"),
    ]
    await application.bot.set_my_commands(commands)

def main() -> None:
    """Run the bot"""
    # Create the Application
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CallbackQueryHandler(delete_all_callback, pattern="^delete_all$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Run the bot
    application.run_polling()

if __name__ == "__main__":
    main()
